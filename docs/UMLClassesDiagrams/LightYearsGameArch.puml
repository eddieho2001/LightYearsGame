@startuml

class Core{
	+template<typename T> using unique = std::unique_ptr<T>
	+template<typename T> using shared = std::shared_ptr<T>
	+template<typename T> using weak = std::weak_ptr<T>
	+template<typename T> using List = std::vector<T>
	+template<typename T> using Set = std::unordered_set<T>
	+template<typename keyType, typename valType, typename compType = std::less<keyType>> using Map = std::map<keyType, valType, compType>
	+template<typename keyType, typename valType, typename hasher = std::hash<keyType>> using Dictionary = std::unordered_map<keyType, valType, hasher>
	+_LOG(M, ...) printf(M "\n", ##__VA_ARGS__)	
}

class EntryPoint{
	+extern ly::Application* GetApplication()
}

class MathUtility{
	+sf::Vector2f Rotation2Vecor(float rotation)
	+float Degree2Radian(float degree)
	+float Radian2Degree(float rad)
	+template<typename T> float Calculate2DVectorLength(const sf::Vector2<T>& vec)
	+template<typename T> sf::Vector2<T>& Scale2DVector(sf::Vector2<T>& vec, float amount)
	+template<typename T> sf::Vector2<T>& Normalize(sf::Vector2<T>& vec)
}

class AssetManager{
	-static unique<AssetManager> mPtrAssetManager
	-Dictionary<std::string, shared<sf::Texture>> mLoadedTextureMap
	-std::string mRootDir
	#AssetManager()
	+static AssetManager& GetInstance()
	+shared<sf::Texture> LoadTexture(const std::string& path)
	+void CleanCycle()
	+void SetAssetRootDir(const std::string& p_strDir)
}

class PhysicsSystem{
	-static unique<PhysicsSystem> mPhysicsSystem
	-b2World mPhysicsWorld
	-float mPhysicsScale
	-int mVelocityIteration
	-int mPositionIteration
	-PhysicsContractListener mContractListener
	-Set<b2Body*> mPendingRemoveListeners
	-void ProcessPendingRemoveListeners()
	#PhysicsSystem()
	+static PhysicsSystem& GetInstance()
	+void Step(float deltaTime)
	+b2Body* AddListener(Actor* ptrListener)
	+float GetPhysicsScale() const
	+void RemoveListener(b2Body* body)
	+static void CleanUp()
}

class PhysicsContractListener{
	+PhysicsContractListener()
	+virtual void BeginContact(b2Contact* contact) override
	+virtual void EndContact(b2Contact* contact) override
}

class Delegate{
	-List<std::function<bool(Args...)>> mCallbacks
	+template<typename ClassName> void BindAction(weak<Object> obj, void(ClassName::* callback)(Args...))
	+void Broadcast(Args... args)
	
}

class Application{
	-sf::RenderWindow mWindow
	-float mTargetFrameRate
	-sf::Clock mTickClock
	-sf::Clock mCleanCycleClock
	-float mCleanCycleInterval;
	-quill::Logger* mlogger
	-shared<World> currentWorld
	-TickInternal(float deltaTime)
	-virtual void Tick(float deltaTime)
	-RenderInternal()
	-virtual void Render()
	+Application(unsigned int winWidth, unsigned int winHeight, const std::string& title, sf::Uint32 style)
	+void Run()
	+template<typename worldType> weak<worldType> LoadWorld()
	+sf::Vector2u GetWinowSize() const
}

class GameApplication{
	-float counter
	-weak<Actor> mDeleteActor
	+GameApplication()
	+virtual void Tick(float deltaTime) override
	
}

class World{
	-Application* mPtrOwner
	-bool mBeginPlay
	-List<shared<Actor>> mActors
	-List<shared<Actor>> mPendingActors
	-quill::Logger* mlogger
	+World(Application* ptrOwner)
	+weak<actorType> SpawnActors()
	+void BeginPlayInternal();
	+void TickInternal(float deltaTime)
	+virtual ~World()
	+void Render(sf::RenderWindow& win)
	+weak<actorType> SpawnActors(Args... args)
	+sf::Vector2u GetWindowSize() const
	+void CleanCycle()
    -void BeginPlay()	
	-void Tick(float deltaTime)
}	

class Object{
	-bool mIsPendingDestory
	+Object();
	+virtual ~Object()
	+void Destory()
	+bool IsPendingDestory() const
	+weak<Object> GetWeakRef()
	+weak<const Object> GetWeakRef() const
	+Delegate<Object*> onDestory
}

class Actor{
	-World* mPtrOwner
	-bool mIsBeginPlay
	-sf::Sprite mSprite
	-sf::Texture mTexture
	-b2Body* mPhysicsBody
	-bool mPhysicsEnabled
	-void CenterPivot()
	-void InitializedPhysics()
	-void UnInitializedPhysics()
	-void UpdatePhysicsBodyTransform()
	+Actor(World* ptrOwner, const std::string& texturePath="")
	+void BeginPlayInternal()
	+virtual void BeginPlay()
	+virtual void Tick(float deltaTime)
	+void TickInternal(float deltaTime)
	+void SetTexture(const std::string& path)
	+void Render(sf::RenderWindow& win)
	+virtual ~Actor()
	+void SetLocation(const sf::Vector2f& newLocaltion)
	+sf::Vector2f GetLocation() const
	+void SetRotation(float newRotation)
	+float GetRotataion() const
	+void AddLocationOffset(const sf::Vector2f& offset)
	+void AddRotationOffset(float offset)
	+sf::Vector2f GetForwardDirection() const
	+sf::Vector2f GetRightDirection() const
	+sf::Vector2f GetLeftDirection() const
	+sf::Vector2u GetWindowSize() const
	+bool IsOutOfWindowBound() const
	+sf::FloatRect GetGlobalBounds() const
	+World* GetWorld() const
	+void SetEnablePhysics(bool enable)
	+virtual void OnActorBeginOverlap(Actor* other)
	+virtual void OnActorEndOverlap(Actor* other)
	+virtual void Destory() override
}

class Spaceship{
	-sf::Vector2f mVelocity
	+Spaceship(World* ptrOwner, const std::string& texturePath="")
	+virtual void Tick(float deltaTime) override
	+void SetVelocity(sf::Vector2f& newVelocity)
	+sf::Vector2f GetVelocity() const { return mVelocity; }
	+virtual void Shoot()
}

class PlayerSpaceship{
	-sf::Vector2f mMoveInput
	-float mfSpeed
	-unique<BulletShooter> mShooter
	-void HandlingInput()
	-void ConsumeInput(float deltaTime)
	-void SetSpeed(float p_fNewSpeed)
	-float GetSpeed() const
	-void NormalizeInput()
	-void ClampInputOnEdge()
	-virtual void Shoot() override
	+PlayerSpaceship(World* ptrOwner, const std::string& texturePath="SpaceShooterRedux/PNG/playerShip1_blue.png")
	+virtual void Tick(float deltaTime) override
	+virtual void Shoot() override
	
}

class Shooter{
	-Actor* mOwner
	-virtual void ShootImpl() = 0
	#Shooter(Actor *ptrOwner)
	+void Shoot()
	+virtual bool CanShoot() const
	+virtual bool IsOnCooldown() const
	+Actor* GetOwner()
}

class BulletShooter{
	-sf::Clock mCoolDownClock
	-float mfTimeForCoolDown
	-virtual void ShootImpl() override
	+BulletShooter(Actor* ptrOwner, float pfTimeForCoolDown = 0.5)
	+virtual bool IsOnCooldown() const override
	
}

class Bullet{
	-Actor* mPtrOwner
	-float mSpeed
	-float mDamage
	-void Move(float deltaTime)
	+Bullet(World* ptrWorld, Actor* ptrOwner, std::string& texturePath, float fspeed, float damage)
	+void SetSpeed(float speed)
	+float GetSpeed() const
	+void SetDamage(float damage)
	+float GetDamage() const
	+virtual void Tick(float deltaTime) override
	+virtual void BeginPlay() override
	
}

class HealthComponent{
	-float mHealth
	-float mMaxHealth
	-void TakeDamage(float amt)
	-void HealthEmpty()
	-void HealthRegen(float amount)
	+HealthComponent(float health, float maxHealth)
	+void ChangeHealth(float amount)
	+float GetHealth() const
	+float GetMaxHealth() const
	+Delegate<float, float, float> onHealthChanged
}

Application <|--GameApplication
Application *--World
World *--Actor
enable_shared_from_this <|--Object
Object <|--Actor
Actor <|--Spaceship
Actor <|--Bullet
Spaceship <|--PlayerSpaceship
Shooter <|--BulletShooter
PlayerSpaceship *--BulletShooter
b2ContactListener <|--PhysicsContractListener
@enduml
