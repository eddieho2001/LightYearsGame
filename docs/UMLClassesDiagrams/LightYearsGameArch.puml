@startuml

class Core{
	+template<typename T> using unique = std::unique_ptr<T>
	+template<typename T> using shared = std::shared_ptr<T>
	+template<typename T> using weak = std::weak_ptr<T>
	+template<typename T> using List = std::vector<T>
	+template<typename T> using Set = std::unordered_set<T>
	+template<typename keyType, typename valType, typename compType = std::less<keyType>> using Map = std::map<keyType, valType, compType>
	+template<typename keyType, typename valType, typename hasher = std::hash<keyType>> using Dictionary = std::unordered_map<keyType, valType, hasher>
	+_LOG(M, ...) printf(M "\n", ##__VA_ARGS__)	
}

class EntryPoint{
	+extern ly::Application* GetApplication()
}

class MathUtility{
	+sf::Vector2f Rotation2Vecor(float rotation)
	+float Degree2Radian(float degree)
	+float Radian2Degree(float rad)
}

class Application{
	-sf::RenderWindow mWindow
	-sf::Sprite mPlayer;
	-sf::Texture mTexture;
	-float mTargetFrameRate
	-sf::Clock mTickClock
	-quill::Logger* mlogger
	+Application()
	+Run()
	+weak<worldType> RoadWorld()
	-TickInternal(float deltaTime)
	#virtual void Tick(float deltaTime)
	-RenderInternal()
	#virtual void Render()
}

class GameApplication{
	-float counter
	-weak<Actor> mDeleteActor
	+GameApplication()
	+virtual void Tick(float deltaTime) override
	
}

class World{
	-Application* mPtrOwner
	-bool mBeginPlay
	-List<shared<Actor>> mActors
	-List<shared<Actor>> mPendingActors
	-quill::Logger* mlogger
	+World(Application* ptrOwner)
	+weak<actorType> SpawnActors()
	+void BeginPlayInternal();
	+void TickInternal(float deltaTime)
	+virtual ~World()
	+void Render(sf::RenderWindow& win)
    -void BeginPlay()	
	-void Tick(float deltaTime)
}	

class Object{
	-bool mIsPendingDestory
	+Object();
	+virtual ~Object()
	+void Destory()
	+bool IsPendingDestory() const
}

class Actor{
	-World* mPtrOwner
	-bool mIsBeginPlay
	-sf::Sprite mSprite
	-sf::Texture mTexture
	-void CenterPivot()
	+Actor(World* ptrOwner)
	+void BeginPlayInternal()
	+virtual void BeginPlay()
	+virtual void Tick(float deltaTime)
	+void TickInternal(float deltaTime)
	+void SetTexture(const std::string& path)
	+void Render(sf::RenderWindow& win)
	+virtual ~Actor()
	+void SetLocation(const sf::Vector2f& newLocaltion)
	+sf::Vector2f GetLocation() const
	+void SetRotation(float newRotation)
	+float GetRotataion() const
	+void AddLocationOffset(const sf::Vector2f& offset)
	+void AddRotationOffset(float offset)
	+sf::Vector2f GetForwardDirection() const
	+sf::Vector2f GetRightDirection() const
}

class Spaceship{
	-sf::Vector2f mVelocity
	+Spaceship(World* ptrOwner, const std::string& texturePath="")
	+virtual void Tick(float deltaTime) override
	+void SetVelocity(sf::Vector2f& newVelocity)
	+sf::Vector2f GetVelocity() const { return mVelocity; }
}

class PlayerSpaceship{
	-sf::Vector2f mMoveInput
	-float mfSpeed
	-void HandlingInput()
	-void ConsumeInput(float deltaTime)
	-void SetSpeed(float p_fNewSpeed)
	-float GetSpeed() const
	+PlayerSpaceship(World* ptrOwner, const std::string& texturePath="SpaceShooterRedux/PNG/playerShip1_blue.png")
	+virtual void Tick(float deltaTime) override
	
}

class AssetManager{
	-static unique<AssetManager> mPtrAssetManager
	-Dictionary<std::string, shared<sf::Texture>> mLoadedTextureMap
	#AssetManager()
	+static AssetManager& GetInstance()
	+shared<sf::Texture> LoadTexture(const std::string& path)
	+void CleanCycle()
	
}

Application <|--GameApplication
Application *--World
World *--Actor
Object <|--Actor
Actor <|--Spaceship
Spaceship <|--PlayerSpaceship

@enduml
